#!/usr/bin/env bash

set -xe -o pipefail

CARGO_COMMAND=

FEATURES_FOR_PUBSUB="rabbitmq zeromq kafka"
FEATURES_FOR_HASH="sha3hash blake2bhash sm3hash"
FEATURES_FOR_CRYPT="secp256k1 ed25519 sm2"
FEATURES_FOR_HASH_AND_CRYPT=("secp256k1 sha3hash" "ed25519 blake2bhash" "sm2 sm3hash")

CRATES_HAVE_RUN=".crates.have-run"

function check_crates_list () {
    find . -maxdepth 1 -mindepth 1 -type d \
            | xargs -I {} basename {} \; \
            | grep -v "^[.]" \
            | grep -v "^target$" \
            | while read crate; do
        if [ $(grep -c "${crate}" "${CRATES_HAVE_RUN}") -eq 0 ]; then
            echo "[Error] A new crate [${crate}] was added but did not added into this script [$0]."
            exit 1
        fi
    done
    rm "${CRATES_HAVE_RUN}"
}

function record_crate_for_check () {
    crate="${1}"
    echo "${crate}" >> "${CRATES_HAVE_RUN}"
}

function cargo_run_build () {
    CARGO_COMMAND="cargo test --no-run"
    cargo_run_all
    CARGO_COMMAND=
}

function cargo_run_coverage () {
    # For: check_crates_list()
    CARGO_COMMAND="echo"
    cargo_run_all
    CARGO_COMMAND=

    KCOV_TARGET="target/cov"
    KCOV_FLAGS="--verify"
    EXCLUDE="/usr/lib,/usr/include,$HOME/.cargo,$HOME/.multirust,rocksdb,secp256k1"
    mkdir -p $KCOV_TARGET
    echo "Cover RUST"
    for FILE in `find target/debug -maxdepth 1 -perm -111 -type f ! -name "*.*"`
    do
        echo "[kcov]: ${FILE}"
        kcov --exclude-pattern $EXCLUDE $KCOV_FLAGS $KCOV_TARGET $FILE || true
    done
    echo "kcov Done"
    bash <(curl -s https://codecov.io/bash) && echo "Uploaded code coverage"
}

function cargo_run_test () {
    export RUSTFLAGS="-C link-dead-code"
    CARGO_COMMAND="cargo test --lib"
    cargo_run_all
    CARGO_COMMAND=
    unset RUSTFLAGS
}

function cargo_run () {
    crate="${1}"
    shift 1
    currdir=$(pwd)
    cd "${crate}"
    ${CARGO_COMMAND} "$@"
    cd "${currdir}"
    record_crate_for_check "${crate}"
}

function cargo_run_all () {

    [ -z "${CARGO_COMMAND}" ] && exit 1

    cargo_run bigint
    cargo_run panic_hook

    cargo_run worker
    cargo_run error
    cargo_run logger
    cargo_run ethcore-io
    cargo_run ethcore-bloom-journal

    cargo_run rlp
    cargo_run rlp_derive
    cargo_run bloomable
    cargo_run ethkey

    cargo_run pubsub_rabbitmq
    cargo_run pubsub_zeromq
    cargo_run pubsub_kafka

    for features in ${FEATURES_FOR_PUBSUB}; do
        cargo_run pubsub --features "${features}"
    done

    cargo_run sha3
    cargo_run blake2b
    cargo_run sm3

    for crate in util authority_manage cita-secp256k1 cita-ed25519 cita-sm2; do
        for features in ${FEATURES_FOR_HASH}; do
            cargo_run ${crate} --features "${features}"
        done
    done

    for crate in cita-crypto libproto proof tx_pool engine_json; do
        for features in "${FEATURES_FOR_HASH_AND_CRYPT[@]}"; do
            cargo_run ${crate} --features "${features}"
        done
    done

    for pubsub_feature in ${FEATURES_FOR_PUBSUB}; do
        for features in "${FEATURES_FOR_HASH_AND_CRYPT[@]}"; do
            cargo_run engine --features "${features} ${pubsub_feature}"
        done
    done
}

function main () {
    local currdir=$(pwd)
    : > "${CRATES_HAVE_RUN}"
    cargo_run_$1
    cd "${currdir}"
    check_crates_list
}

main "$@"
